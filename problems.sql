create table problems(
Problem_id varchar (10) not null Primary Key ,Problem_name
varchar(50), 
Problem_description text
);
Insert into problems Values('CODA01','Welcome world.','Print welcome world');
INSERT INTO problems VALUES ('CODA02', 'BeautifulString', 'A beautiful string is a string in which the vowel count is equal to the consonant count.');
INSERT INTO problems VALUES ('CODA03', 'Minimumnoofoperations', 'You have n boxes. You are given a binary string boxes of length n, where boxes[i] is 0 if the ith box is empty, and 1 if it contains one ball. In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if |i-j| == 1. Note that after doing so, there may be more than one ball in some boxes. Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. Each answer[i] is calculated considering the initial state of the boxes.');
Insert into problems Values('ACMU01', 'Ami prime?','check if the given number is prime or not Input :- a number t saying number of testcases. nextt lines contains one number n Output :- print true if the given number is prime otherwise print false. Input :- 5 24 1123 827 623 12 Output :- no Yes Yes Nono');
Insert into problems Values('ACMU02', 'Nth tribonacci number','The Tribonacci sequence Tn is defined as follows: T0 = 0, T1 = 1, T2 = 1,and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.Given n, return the value of Tn.Example1:Input:n=4Output:4Explanation:T_3=0+1+1=2T_4=1+1+2=4');
INSERT INTO problems VALUES ('ACMU03', 'Kthlargestnumber', 'Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. Input: nums = [3,2,1,5,6,4], k = 2 Output: 5');
INSERT INTO problems VALUES ('ACMU04', 'Validstring', 'Given a binary string SS consisting of 0s and 1s, find whether there exists a rightwise circular rotation of the string such that every 2 adjacent 1s are separated by at most C 0. Sample Input: 3 4 1 1100 4 0 0101 6 1 101001 Sample Output: YES NO YES');
INSERT INTO problems VALUES ('CDR01', 'XOR array', 'Find the XOR of an array. Input: A vector array of size n Output: Number, i.e XOR of an array.');
INSERT INTO problems VALUES ('CDR02', 'Deepestnodessum', 'Given the root of a binary tree, return the sum of values of its deepest leaves. Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] Output: 15');
INSERT INTO problems VALUES ('CDR03', 'Is graphbipartite?', 'Given a graph, find whether the graph is Bipartite. Input: A 2d array Output: Bool value (true or false).');
INSERT INTO problems VALUES ('CODW01', 'Palindrome check', 'A number is called palindromic if its decimal representation is a palindrome. You are given a range, described by a pair of integers L and R. Find the sum of all palindromic numbers lying in the range [L, R], inclusive of both the extrema. Input: L=1, R=10 Output: 45');
INSERT INTO problems VALUES ('CODW02', 'SlidingWindow', 'Given a string s and an integer k. Return the maximum number of vowel letters in any substring of s with length k. Vowel letters in English are (a, e, i, o, u). Input: s="abciiidef", k=3 Output: 3');
INSERT INTO problems VALUES ('DZER01', 'Reverse string', 'Given a sentence. Print the words of a sentence in reverse order. Sample Input: "cats and dogs" Sample Output: "dogs and cats"');
INSERT INTO problems VALUES ('DZER02', 'SpiralOrder', 'You are given a 2D array having m rows and n columns. Write a program to print it in Spiral form. Input: m=4, n=4 Array: [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]] Output: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10');
INSERT INTO problems VALUES ('DZER03', 'Tower of hanoi', 'Implement Towers of Hanoi program for 3 towers (recursion), and count the number of calls made. Sample Input: 3 Sample Output: 7');
INSERT INTO problems VALUES ('KCR01', 'Water Bottles', 'Given numBottles full water bottles, you can exchange numExchange empty water bottles for one full water bottle. The operation of drinking a full water bottle turns it into an empty bottle. Return the maximum number of water bottles you can drink. Input: numBottles=9, numExchange=3 Output: 13');
INSERT INTO problems VALUES ('KCR02', 'LCM problem', 'Two integers A and B are the inputs. Write a program to find GCD and LCM of A and B. Input: A=120, B=140 Output: GCD=20, LCM=840');
INSERT INTO problems VALUES ('KCR03', 'Smallest path', 'Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. Note: You can only move either down or right at any point in time. Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7');
INSERT INTO problems VALUES ('CODE01', 'Binary search', 'Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4');
INSERT INTO problems VALUES ('CODE02', 'NextPermutation', 'Find the next permutation of given string. Input: A string Output: The next permutation of string');
INSERT INTO problems VALUES ('CODE03', 'RangeQueries', 'Some problems appear hard though they are very easy. Today Aakash is stuck in a range query problem. He has been given an array with only numbers 0 and 1. There are two types of queries: 0 LR: Check whether the number formed from the array elements L to R is even or odd and print "EVEN" or "ODD" respectively. Number formation is the binary number from the bits status in the array L to R 1 X: Flip the Xth bit in the array. Indexing is 1 based. Input: First line contains a number N and Q as input. Next line contains N space-separated 0 or 1. Next Q lines contain description of each query. Output: For only query type 0 L R, whether the number in range L to R is "EVEN" or "ODD" (without quotes).');
